{"version":3,"sources":["base.min.js"],"names":["BaseConnect","config","this","inverseTables","BaseHelpers","tables","apptoken","usertoken","async","databaseId","username","password","quickstartConfig","quickstart","ticket","getUrlParam","realm","cookieDbid","cookieName","proxies","local","quickstartDev","_self","post","data","callback","handler","type","action","postData","buildPostData","dbid","xmlPost","generateQuickbaseQuery","query","validQuery","handleEx","key","value","handleOtherOperators","operators","Object","keys","queryParts","i","length","operator","compareValue","queryPart","forEach","v","push","join","handleOr","replaceFieldNames","split","map","test","field","match","isNaN","fid","replace","replaceOptionFieldNames","fieldName","handleXMLCharacters","string","createParameter","params","fieldParams","parseInt","toString","fieldValue","createFieldParameter","fidParams","createFidParameter","csvData","createCSVParameter","xml","getNode","response","tag","$","find","text","getRecords","records","recordsArray","record","fields","j","id","attr","url","sections","filename","tableConfig","getRids","ridsArray","getNewRids","rids","rid","getTableSchema","schema","tableSchema","tableName","keyFid","getFields","$schema","getAppSchemaInfo","currentTable","name","fieldsObj","$field","fieldHash","attributes","prop","val","children","each","childNode","nodeName","toLowerCase","innerText","choices","fieldChoices","choice","getReports","reports","reportsObj","report","reportHash","criteria","clist","slist","options","formatUserRoles","users","allUsers","user","roles","userRoles","role","roleHash","accessId","access","userHash","firstName","lastName","lastAccess","lastAccessAppLocal","param","ignoreEncoding","body","base64Encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","keyStr","utfText","n","c","charCodeAt","String","fromCharCode","charAt","quickstartPost","proxy","json","JSON","parse","getCookie","stringify","dataType","contentType","error","ajax","qbaseResponseCode","code","message","context","qbaseResponse","Base","BaseConnectInstance","baseConnectInstance","Table","removeQuickstartConfig","doQuery","handle","queryParams","fmt","returnpercentage","isQid","qid","table","prototype","call","3","in","first","last","all","XEX","doQueryCount","addRecord","editRecord","changeRecordOwner","owner","newowner","copyMasterDetail","getRecordInfo","allFields","info","num_fields","update_id","deleteRecord","purgeRecords","numberOfRecordDeleted","runImport","numberOfRecordsImported","importFromCSV","csvArray","csv","row","rowValues","getTableFields","genAddRecordForm","getNumRecords","setFieldProperties","getTableReports","setTables","getAppTables","getOneTimeTicket","authenticate","auth","hours","signOut","getDBVar","varname","setDBVar","uploadPage","pagetype","pagebody","deletePage","pageId","pageid","getDbPage","pageID","cloneDatabase","createDatabase","description","createAppToken","dbname","dbdesc","createapptoken","deleteDatabase","renameApp","newappname","findDbByName","getTables","tablesObj","tableId","getAppDtmInfo","allTables","tableHash","lastModifiedTime","lastRecModTime","requestTime","requestNextAllowedTime","getDbInfo","createdTime","numRecords","mgrID","mgrName","version","time_zone","grantedDbs","allDatabases","databases","database","databaseHash","getUserInfo","email","login","screenName","isVerified","externalAuth","getUserRoles","changeUserRole","userId","roleId","newRoleId","register","setCookie","quickstartAction","appToken","signIn","changePassword","forgotPassword","emailObj","resetPassword","timeZone","format","d","Date","setTime","getTime","expires","toUTCString","document","cookie","ca","substring","indexOf","newObject","regex","RegExp","results","exec","location","search","decodeURIComponent","formatDateElement","element","dateToString","milliseconds","date","month","getUTCMonth","day","getUTCDate","getUTCFullYear","dateTimeToString","today","trim","stdTimezoneOffset","jan","getFullYear","jul","Math","max","getTimezoneOffset","dst","zoneOffsets","utc","eastern","central","mountain","pacific","offset","getUTCHours","minutes","getUTCMinutes","dateTime","getUTCSeconds","ampm","durationToString","result","ms","formatType","days","seconds","console","log","round","timeOfDayToString","timeOfDay","setHours","setMinutes","setSeconds","setMilliseconds","getHours","getMinutes","redirectToEditForm","root","window","redirectToViewForm","downloadFile"],"mappings":"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","file":"../base.min.js","sourcesContent":["function BaseConnect(config) {\n  this.config = config;\n  this.inverseTables = BaseHelpers.inverseTables(config.tables);\n  this.apptoken = config.apptoken;\n  this.usertoken = config.usertoken;\n  this.async = config.async || false;\n  this.databaseId = config.databaseId;\n  this.username = config.username;\n  this.password = config.password;\n  this.quickstartConfig = config.quickstart || false;\n  this.ticket = config.ticket || BaseHelpers.getUrlParam('ticket');\n  this.realm = config.realm;\n\n  this.cookieDbid = config.cookieDbid;\n  this.cookieName = \"quickstart_session\";\n\n  if (this.cookieDbid) {\n      this.cookieName += \"_\" + this.cookieDbid;\n  } else {\n      this.cookieName += \"_\" + this.databaseId;\n  }\n\n  this.proxies = {\n      local: \"https://i460ti6d92.execute-api.us-east-1.amazonaws.com/prod\",\n      quickstart: \"https://zzcogtljc7.execute-api.us-east-1.amazonaws.com/prod/proxy\",\n      quickstartDev: \"https://zzcogtljc7.execute-api.us-east-1.amazonaws.com/dev/proxy\"\n  };\n\n  _self = this;\n\n  this.post = function (data, callback, handler) {\n      var type = data.type || \"API\";\n      var action = type + \"_\" + data.action;\n      var postData = this.buildPostData(data.dbid, data);\n      var dbid = \"\";\n\n      if (!data.dbid) {\n          dbid = \"main\";\n      } else {\n          if (this.config && data.dbid != \"main\") {\n              if (data.dbid == this.databaseId) {\n                  dbid = this.databaseId;\n              } else {\n                  dbid = this.config.tables[data.dbid].dbid;\n              };\n          } else {\n              dbid = data.dbid;\n          };\n      };\n\n      return this.xmlPost(dbid, action, postData, callback, handler);\n  };\n\n  this.generateQuickbaseQuery = function (query) {\n      var validQuery = [];\n\n      var handleEx = function (key, value) {\n          return \"{'\" + key + \"'.EX.'\" + value + \"'}\";\n      };\n\n      var handleOtherOperators = function (key, value) {\n          var operators = Object.keys(value);\n\n          var queryParts = [];\n          for (var i = 0; i < operators.length; i++) {\n              var operator = operators[i];\n\n              var compareValue = value[operator];\n              var queryPart = \"\";\n\n              if (operator == \"in\") {\n                  var queryParts = [];\n\n                  compareValue.forEach(function (v) {\n                      queryParts.push(\"{'\" + key + \"'.EX.'\" + v + \"'}\");\n                  });\n\n                  queryPart = \"(\" + queryParts.join(\"OR\") + \")\";\n              } else {\n                  queryPart = \"{'\" + key + \"'.\" + operator + \".'\" + compareValue + \"'}\";\n              };\n\n              queryParts.push(queryPart);\n          };\n\n          return queryParts.join(\"AND\");\n      };\n\n      var handleOr = function (key, value) {\n          var queryPart = [];\n\n          value.forEach(function (query) {\n              var key = Object.keys(query)[0];\n              var value = query[key];\n\n              if (typeof value == \"object\") {\n                  var query = handleOtherOperators(key, value);\n                  queryPart.push(query);\n              } else {\n                  var query = handleEx(key, value);\n                  queryPart.push(query);\n              };\n          });\n\n          return \"(\" + queryPart.join(\"OR\") + \")\";\n      };\n\n      for (var key in query) {\n          var value = query[key];\n          var queryPart = \"\";\n\n          if (key == \"or\") {\n              queryPart = handleOr(key, value);\n          } else {\n              if (typeof value == \"object\") {\n                  queryPart = handleOtherOperators(key, value);\n              } else {\n                  queryPart = handleEx(key, query[key]);\n              };\n          };\n\n          validQuery.push(queryPart);\n      };\n\n      validQuery = validQuery.join(\"AND\");\n      return validQuery;\n  };\n\n  this.replaceFieldNames = function (query, dbid) {\n      var config = this.config;\n\n      query = query.split(/(}AND|\\)AND|}OR|\\)OR)/).map(function (queryPart) {\n          if (!/(}AND|\\)AND|}OR|\\)OR)/.test(queryPart)) {\n              var field = queryPart.match(/\\{'*(.*)'\\..*'/)[1];\n\n              if (isNaN(field)) {\n                  var fid = config.tables[dbid][field];\n                  queryPart = queryPart.replace(field, fid);\n              };\n          };\n\n          return queryPart;\n      });\n\n      return query.join(\"\");\n  };\n\n  this.replaceOptionFieldNames = function (value, dbid) {\n      var config = this.config;\n\n      value = value.split(\".\");\n      value = value.map(function (fieldName) {\n          if (isNaN(fieldName)) {\n              var fid = config.tables[dbid][fieldName];\n              return fid;\n          } else {\n              return fieldName;\n          }\n      });\n\n      return value.join(\".\");\n  };\n\n  this.handleXMLCharacters = function (string) {\n      if (typeof string == \"string\") {\n          string = string\n              .replace(/&/g, '&amp;')\n              .replace(/</g, '&lt;')\n              .replace(/>/g, '&gt;')\n              .replace(/\"/g, '&quot;')\n              .replace(/'/g, '&apos;')\n      };\n\n      return string;\n  };\n\n  this.buildPostData = function (dbid, data) {\n      var postData = [\"<qdbapi>\"];\n\n      if (this.apptoken) {\n          postData.push(this.createParameter(\"apptoken\", this.apptoken));\n      };\n\n      if (this.usertoken) {\n          postData.push(this.createParameter(\"usertoken\", this.usertoken));\n      }\n\n      if (this.username && !this.ticket && !this.usertoken) {\n          postData.push(this.createParameter(\"username\", this.username));\n          postData.push(this.createParameter(\"password\", this.password));\n      };\n\n      if (this.ticket && !this.usertoken) {\n          postData.push(this.createParameter(\"ticket\", this.ticket));\n      };\n\n      for (var key in data.params) {\n          var value = data.params[key];\n\n          if (key == \"clist\" || key == \"slist\" || key == \"options\") {\n              if (typeof value == \"object\") {\n                  value = value.join(\".\");\n              };\n\n              if (this.config && (key == \"clist\" || key == \"slist\")) {\n                  if (value) {\n                      value = this.replaceOptionFieldNames(value, dbid);\n                  };\n              };\n          } else if (key == \"query\") {\n              value = this.generateQuickbaseQuery(value);\n\n              if (this.config) {\n                  value = this.replaceFieldNames(value, dbid);\n              };\n\n              key = \"query\";\n          };\n\n          if (value) {\n              postData.push(this.createParameter(key, value));\n          };\n      };\n\n      for (field in data.fieldParams) {\n          if (this.config && parseInt(field).toString() == \"NaN\") {\n              var fid = this.config.tables[dbid][field];\n          } else {\n              var fid = field;\n          };\n\n          var fieldValue = this.handleXMLCharacters(data.fieldParams[field]);\n          postData.push(this.createFieldParameter(fid, fieldValue));\n      };\n\n      for (key in data.fidParams) {\n          postData.push(this.createFidParameter(key, data.fidParams[key]));\n      };\n\n      if (data.csvData) {\n          postData.push(this.createCSVParameter(data.csvData));\n      };\n\n      postData.push(\"</qdbapi>\");\n      postData = postData.join(\"\");\n\n      if (this.username || this.quickstartConfig) {\n          return {\n              \"xml\": postData\n          }\n      } else {\n          return postData;\n      };\n  };\n\n  this.getNode = function (response, tag) {\n      return $(response).find(tag).text();\n  };\n\n  this.getRecords = function (dbid, response) {\n      var records = $(response).find(\"records\").find(\"record\");\n      var recordsArray = [];\n\n      for (var i = 0; i < records.length; i++) {\n          var record = records[i];\n          var fields = $(record).find(\"f\");\n\n          record = {}\n\n          for (var j = 0; j < fields.length; j++) {\n              var field = fields[j];\n              var id = parseInt($(field).attr(\"id\"));\n\n              if ($(field).find(\"url\").text() != \"\") {\n                  var url = $(field).find(\"url\").text();\n                  var sections = url.split(\"/\");\n                  var filename = sections[sections.length - 1];\n\n                  var value = {\n                      \"filename\": filename,\n                      \"url\": url\n                  };\n              } else {\n                  var value = $(field).text();\n              };\n\n              if (this.config) {\n                  var tableConfig = this.inverseTables[dbid];\n                  if (tableConfig[id]) {\n                      id = tableConfig[id.toString()];\n                      record[id] = value;\n                  };\n              } else {\n                  record[id] = value;\n              };\n          };\n\n          recordsArray.push(record);\n      };\n\n      return recordsArray;\n  };\n\n  this.getRids = function (response) {\n      var records = $(response).find(\"records\").find(\"record\");\n      var ridsArray = [];\n\n      for (var i = 0; i < records.length; i++) {\n          var record = records[i];\n          ridsArray.push($(record).find('f[id=\"3\"]').text());\n      };\n\n      return ridsArray;\n  };\n\n  this.getNewRids = function (response) {\n      var rids = $(response).find(\"rids\").find(\"rid\");\n      var ridsArray = [];\n\n      for (var i = 0; i < rids.length; i++) {\n          var rid = parseInt($(rids[i]).text());\n          ridsArray.push(rid);\n      };\n\n      return ridsArray;\n  };\n\n  this.getTableSchema = function (schema) {\n      var tableSchema = {\n          dbid: '',\n          tableName: '',\n          keyFid: '',\n          fields: this.getFields(schema)\n      };\n\n      var $schema = $(schema);\n      tableSchema.dbid = $schema.find('table_id').text();\n      tableSchema.tableName = $schema.find('name').text();\n      tableSchema.keyFid = $schema.find('key_fid').text();\n\n      return tableSchema;\n  };\n\n  this.getAppSchemaInfo = function (schema) {\n      var $schema = $(schema);\n      var tables = $schema.find(\"chdbid\");\n      var tableSchema = [];\n\n      for (var i = 0; i < tables.length; i++) {\n          var currentTable = $(tables[i]);\n\n          tableSchema.push({\n              name: currentTable.attr(\"name\"),\n              dbid: currentTable.text()\n          });\n      }\n\n      return tableSchema;\n  };\n\n  this.getFields = function (schema) {\n      var fields = $(schema + ', fields').find(\"field\");\n      var fieldsObj = {};\n\n      for (var i = 0; i < fields.length; i++) {\n          var $field = $(fields[i]);\n          var fieldHash = {};\n\n          for (var j = 0; j < fields[i].attributes.length; j++) {\n              var prop = fields[i].attributes[j].name;\n              var val = fields[i].attributes[j].value;\n              if (prop == 'id') {\n                  fieldHash['fid'] = val;\n              } else {\n                  fieldHash[prop] = val;\n              }\n          }\n\n          $field.children().each(function (i, childNode) {\n              var prop = childNode.nodeName.toLowerCase();\n              var val = childNode.innerText;\n              if (prop != 'choices') fieldHash[prop] = val;\n          })\n\n          var choices = $field.find(\"choices\").find(\"choice\");\n          if (choices.length > 0) {\n              var fieldChoices = [];\n              for (var j = 0; j < choices.length; j++) {\n\n                  var choice = $(choices[j]).text();\n                  fieldChoices.push(choice);\n              };\n\n              fieldHash[\"choices\"] = fieldChoices;\n          };\n\n          fieldsObj[$field.attr(\"id\")] = fieldHash;\n      };\n\n      return fieldsObj;\n  };\n\n  this.getReports = function (schema) {\n      var reports = $(schema).find(\"queries\").find(\"query\");\n      var reportsObj = {};\n\n      for (var i = 0; i < reports.length; i++) {\n          var report = reports[i];\n          var reportHash = {\n              \"name\": $(report).find(\"qyname\").text(),\n              \"type\": $(report).find(\"qytype\").text(),\n              \"criteria\": $(report).find(\"qycrit\").text(),\n              \"clist\": $(report).find(\"qyclst\").text(),\n              \"slist\": $(report).find(\"qyslst\").text(),\n              \"options\": $(report).find(\"qyopts\").text()\n          }\n\n          reportsObj[$(report).attr(\"id\")] = reportHash;\n      };\n\n      return reportsObj;\n  };\n\n  this.formatUserRoles = function (schema) {\n      var users = $(schema).find(\"users\").find(\"user\");\n      var allUsers = [];\n\n      for (var i = 0; i < users.length; i++) {\n          var user = users[i];\n          var roles = $(user).find(\"roles\").find(\"role\");\n\n          var userRoles = [];\n          for (var j = 0; j < roles.length; j++) {\n              var role = roles[j];\n              var roleHash = {\n                  \"id\": $(role).attr(\"id\"),\n                  \"name\": $(role).find(\"name\").text(),\n                  \"accessId\": $(role).find(\"access\").attr(\"id\"),\n                  \"access\": $(role).find(\"access\").text()\n              }\n\n              userRoles.push(roleHash);\n          };\n\n          var userHash = {\n              \"id\": $(user).attr(\"id\"),\n              \"firstName\": $(user).find(\"firstName\").text(),\n              \"lastName\": $(user).find(\"lastName\").text(),\n              \"lastAccess\": $(user).find(\"lastAccess\").text(),\n              \"lastAccessAppLocal\": $(user).find(\"lastAccessAppLocal\").text(),\n              \"roles\": userRoles\n          };\n\n          allUsers.push(userHash);\n      };\n\n      return allUsers;\n  };\n\n  this.createParameter = function (key, value) {\n      return \"<\" + key + \">\" + value + \"</\" + key + \">\";\n  };\n\n  this.createFieldParameter = function (fid, value) {\n      var param = \"<field fid='\" + fid + \"'\";\n\n      if (value) {\n          if (value.filename) {\n              param += \" filename='\" + value.filename + \"'>\";\n\n              if (value.ignoreEncoding == true) {\n                  param += value.body;\n              } else {\n                  param += this.base64Encode(value.body);\n              };\n          } else {\n              param += \">\"\n              param += value;\n          };\n      } else {\n          param += \">\";\n      };\n\n      param += \"</field>\";\n      return param;\n  };\n\n  this.createFidParameter = function (fid, value) {\n      return \"<_fid_\" + fid + \">\" + value + \"</_fid_\" + fid + \">\";\n  };\n\n  this.createCSVParameter = function (data) {\n      return \"<records_csv><![CDATA[\" + data + \"]]></records_csv>\";\n  };\n\n  this.base64Encode = function (input) {\n      var output = \"\";\n      var keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n      var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n      var i = 0;\n\n      var string = input.replace(/\\r\\n/g, \"\\n\");\n      var utfText = \"\";\n\n      for (var n = 0; n < string.length; n++) {\n          var c = string.charCodeAt(n);\n\n          if (c < 128) {\n              utfText += String.fromCharCode(c);\n          } else if ((c > 127) && (c < 2048)) {\n              utfText += String.fromCharCode((c >> 6) | 192);\n              utfText += String.fromCharCode((c & 63) | 128);\n          } else {\n              utfText += String.fromCharCode((c >> 12) | 224);\n              utfText += String.fromCharCode(((c >> 6) & 63) | 128);\n              utfText += String.fromCharCode((c & 63) | 128);\n          }\n      }\n\n      input = utfText;\n\n      while (i < input.length) {\n          chr1 = input.charCodeAt(i++);\n          chr2 = input.charCodeAt(i++);\n          chr3 = input.charCodeAt(i++);\n\n          enc1 = chr1 >> 2;\n          enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n          enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n          enc4 = chr3 & 63;\n\n          if (isNaN(chr2)) {\n              enc3 = enc4 = 64;\n          } else if (isNaN(chr3)) {\n              enc4 = 64;\n          };\n\n          output = output +\n              keyStr.charAt(enc1) + keyStr.charAt(enc2) +\n              keyStr.charAt(enc3) + keyStr.charAt(enc4);\n      };\n\n      return output;\n  };\n\n  this.quickstartPost = function (data, callback, handler, dbid, action, proxy) {\n      if (proxy) {\n          var json = {\n              dbid: dbid,\n              realm: this.realm,\n              action: action,\n              apptoken: this.apptoken\n          };\n\n          json[\"xml\"] = data.xml;\n          json[\"quickstartAction\"] = \"Proxy\";\n          json[\"ticket\"] = JSON.parse(BaseHelpers.getCookie(_self.cookieName)).ticket;\n      } else {\n          var json = data;\n      };\n\n      json = JSON.stringify(json)\n\n      var postData = {\n          url: this.proxies.quickstart,\n          data: json,\n          dataType: \"text\",\n          type: \"POST\",\n          contentType: \"application/json\"\n      };\n\n      if (this.async == \"callback\") {\n          postData[\"success\"] = function (json) {\n              json = JSON.parse(json);\n              json = json.data || json;\n\n              if (json.error) {\n                  return callback(json);\n              } else {\n                  return callback(handler(json));\n              }\n          };\n\n          $.ajax(postData);\n\n      } else if (this.async == \"promise\") {\n          postData[\"dataType\"] = \"text\";\n          postData[\"dataFilter\"] = function (json) {\n              json = JSON.parse(json);\n              json = json.data || json;\n\n              if (json.error) {\n                  return json;\n              } else {\n                  return handler(json);\n              }\n          };\n\n          return $.ajax(postData);\n      };\n  };\n\n  this.qbaseResponseCode = function (response) {\n      var code = $(response).find(\"errcode\").text();\n      var message = $(response).find(\"errtext\").text();\n      message += \", \" + $(response).find(\"errdetail\").text();\n\n      return {\n          error: {\n              code: code,\n              message: message\n          }\n      };\n  };\n\n  this.xmlPost = function (dbid, action, data, callback, handler) {\n      if (this.quickstartConfig) {\n          return _self.quickstartPost(data, callback, handler, dbid, action, true);\n      };\n\n      var url = \"/db/\" + dbid + \"?act=\" + action;\n      var postData = {\n          url: url,\n          data: data,\n          dataType: \"xml\",\n          type: \"POST\",\n          context: this,\n          contentType: \"text/xml\"\n      };\n\n      //local development\n      if (this.username) {\n          data[\"realm\"] = this.realm;\n          data[\"call\"] = action;\n          data[\"apptoken\"] = this.apptoken || \"\";\n          data[\"dbid\"] = dbid;\n\n          postData[\"dataType\"] = \"text\";\n          postData[\"contentType\"] = \"application/json\";\n\n          postData[\"url\"] = this.proxies.local;\n          postData[\"data\"] = JSON.stringify(data);\n      };\n\n      if (this.async == \"callback\") {\n          postData[\"success\"] = function (xml) {\n              var qbaseResponse = this.qbaseResponseCode(xml);\n\n              if (qbaseResponse.error.code != \"0\") {\n                  return callback(qbaseResponse);\n              } else {\n                  return callback(handler(xml));\n              };\n          };\n\n          postData[\"error\"] = function (xml) {\n              return callback({\n                  error: {\n                      code: \"503\",\n                      message: \"Service Unavailable.\"\n                  }\n              })\n          };\n\n          $.ajax(postData);\n\n      } else if (this.async == \"promise\") {\n          postData[\"dataType\"] = \"text\";\n\n          postData[\"dataFilter\"] = function (xml) {\n              var qbaseResponse = _self.qbaseResponseCode(xml);\n\n              if (qbaseResponse.error.code != \"0\") {\n                  return qbaseResponse;\n              } else {\n                  return handler(xml);\n              };\n          };\n\n          return $.ajax(postData);\n      } else {\n          var response = null;\n\n          postData[\"success\"] = function (xml) {\n              var qbaseResponse = this.qbaseResponseCode(xml);\n\n              if (qbaseResponse.error.code != \"0\") {\n                  response = qbaseResponse;\n              } else {\n                  response = handler(xml);\n              };\n          };\n\n          postData[\"error\"] = function (xml) {\n              return callback({\n                  error: {\n                      code: \"503\",\n                      message: \"Service Unavailable.\"\n                  }\n              })\n          };\n\n          postData[\"async\"] = false;\n\n          $.ajax(postData);\n\n          return response;\n      };\n  };\n}\n\nfunction Base(config) {\n  var BaseConnectInstance = new BaseConnect(config);\n\n  this.baseConnectInstance = BaseConnectInstance;\n  this.databaseId = config.databaseId;\n\n  this.Table = function (key, config) {\n      this.removeQuickstartConfig = function (config) {\n          delete config[\"quickstart_users\"];\n          delete config[\"quickstart_username\"];\n          delete config[\"quickstart_password\"];\n          delete config[\"quickstart_key\"];\n          return config;\n      };\n\n      if (BaseConnectInstance.config.quickstart) {\n          config = this.removeQuickstartConfig(config);\n      };\n\n      this[key] = config;\n      this.tableName = key;\n      this.dbid = config.dbid;\n\n      this.doQuery = function (query, params, callback, handle) {\n          var tableName = this.tableName;\n\n          this.handle = function (response) {\n              return BaseConnectInstance.getRecords(tableName, response, \"records\");\n          };\n\n          var queryParams = {\n              \"fmt\": \"structured\",\n              \"returnpercentage\": \"1\"\n          }\n          if (query) {\n              var isQid = !isNaN(query);\n\n              if (isQid) {\n                  queryParams.qid = query;\n              } else {\n                  queryParams.query = query;\n              };\n          } else {\n              queryParams.query = \"{'3'.XEX.''}\"\n          };\n\n          if (params) {\n              var clist = params.clist;\n          } else {\n              var params = {};\n          };\n\n          if (BaseConnectInstance.config && !clist) {\n              var table = BaseConnectInstance.config.tables[tableName];\n\n              var clist = [];\n              for (key in table) {\n                  var value = table[key];\n\n                  if (!isNaN(value)) {\n                      clist.push(key);\n                  };\n              };\n\n              params.clist = clist.join(\".\");\n          };\n\n          queryParams.clist = params.clist;\n          queryParams.slist = params.slist\n          queryParams.options = params.options\n\n          var data = {\n              dbid: tableName,\n              action: \"DoQuery\",\n              params: queryParams\n          };\n\n          if (handle) {\n              this.handle = handle;\n          };\n\n          return BaseConnectInstance.post(data, callback, this.handle);\n      };\n\n      this.find = function (rid, callback) {\n          var tableName = this.tableName;\n\n          this.handle = function (response) {\n              var records = BaseConnectInstance.getRecords(tableName, response, \"records\");\n              if (records.length > 0) {\n                  if (records.length > 1) {\n                      return records;\n                  } else {\n                      return records[0];\n                  };\n              } else {\n                  return {};\n              };\n          };\n\n          if (Object.prototype.toString.call(rid) == \"[object Array]\") {\n              var query = {\n                  \"3\": { in: rid\n                  }\n              }\n          } else {\n              var query = {\n                  \"3\": rid\n              };\n          };\n\n          return this.doQuery(query, null, callback, this.handle);\n      };\n\n      this.first = function (query, params, callback) {\n          var tableName = this.tableName;\n\n          this.handle = function (response) {\n              var records = BaseConnectInstance.getRecords(tableName, response, \"records\");\n              if (records.length > 0) {\n                  return records[0];\n              } else {\n                  return {};\n              };\n          };\n\n          return this.doQuery(query, params, callback, this.handle);\n      };\n\n      this.last = function (query, params, callback) {\n          var tableName = this.tableName;\n\n          this.handle = function (response) {\n              var records = BaseConnectInstance.getRecords(tableName, response, \"records\");\n              if (records.length > 0) {\n                  return records[records.length - 1];\n              } else {\n                  return {};\n              };\n          };\n\n          return this.doQuery(query, params, callback, this.handle);\n      };\n\n      this.all = function (params, callback) {\n          var tableName = this.tableName;\n\n          this.handle = function (response) {\n              var records = BaseConnectInstance.getRecords(tableName, response, \"records\");\n              if (records.length > 0) {\n                  return records;\n              } else {\n                  return {};\n              };\n          };\n\n          return this.doQuery({\n              \"3\": {\n                  XEX: \"\"\n              }\n          }, params, callback, this.handle);\n      };\n\n      this.getRids = function (query, callback) {\n          this.handle = function (response) {\n              return BaseConnectInstance.getRids(response);\n          };\n\n          params = {\n              clist: \"3\"\n          };\n\n          if (!query) {\n              query = {\n                  \"3\": {\n                      XEX: \"\"\n                  }\n              }\n          };\n\n          return this.doQuery(query, params, callback, this.handle);\n      };\n\n      this.doQueryCount = function (query, callback) {\n          this.handle = function (response) {\n              return BaseConnectInstance.getNode(response, \"numMatches\");\n          };\n\n          var data = {\n              dbid: this.tableName,\n              action: \"DoQueryCount\",\n              params: {\n                  \"query\": query\n              }\n          };\n\n          return BaseConnectInstance.post(data, callback, this.handle);\n      };\n\n      this.addRecord = function (fieldParams, callback) {\n          this.handle = function (response) {\n              return parseInt(BaseConnectInstance.getNode(response, \"rid\"));\n          };\n\n          var data = {\n              dbid: this.tableName,\n              action: \"AddRecord\",\n              fieldParams: fieldParams\n          };\n\n          return BaseConnectInstance.post(data, callback, this.handle);\n      };\n\n      this.editRecord = function (rid, fieldParams, callback) {\n          this.handle = function (response) {\n              var rid = BaseConnectInstance.getNode(response, \"rid\");\n              return rid ? true : false;\n          };\n\n          var data = {\n              dbid: this.tableName,\n              action: \"EditRecord\",\n              fieldParams: fieldParams,\n              params: {\n                  \"rid\": rid\n              }\n          }\n\n          return BaseConnectInstance.post(data, callback, this.handle);\n      };\n\n      this.changeRecordOwner = function (rid, owner, callback) {\n          this.handle = function (response) {\n              return true;\n          };\n\n          var data = {\n              dbid: this.tableName,\n              action: \"ChangeRecordOwner\",\n              params: {\n                  \"rid\": rid,\n                  \"newowner\": owner\n              }\n          };\n\n          return BaseConnectInstance.post(data, callback, this.handle);\n      };\n\n      this.copyMasterDetail = function (params, callback) {\n          this.handle = function (response) {\n              return BaseConnectInstance.getNode(response, \"parentrid\");\n          };\n\n          var data = {\n              dbid: this.tableName,\n              action: \"CopyMasterDetail\",\n              params: params\n          };\n\n          return BaseConnectInstance.post(data, callback, this.handle);\n      };\n\n      this.getRecordInfo = function (rid, callback) {\n          this.handle = function (response) {\n\n              var allFields = {};\n              var fields = $(response).find(\"field\");\n\n              for (var i = 0; i < fields.length; i++) {\n                  var field = fields[i];\n                  var fieldHash = {\n                      \"name\": BaseConnectInstance.getNode(field, \"name\"),\n                      \"type\": BaseConnectInstance.getNode(field, \"type\"),\n                      \"value\": BaseConnectInstance.getNode(field, \"value\")\n                  };\n\n                  allFields[$(field).find(\"fid\").text()] = fieldHash;\n              };\n\n              var info = {\n                  \"rid\": BaseConnectInstance.getNode(response, \"rid\"),\n                  \"num_fields\": BaseConnectInstance.getNode(response, \"num_fields\"),\n                  \"update_id\": BaseConnectInstance.getNode(response, \"update_id\"),\n                  \"fields\": allFields\n              };\n\n              return info;\n          };\n\n          var data = {\n              dbid: this.tableName,\n              action: \"GetRecordInfo\",\n              params: {\n                  \"rid\": rid\n              }\n          };\n\n          return BaseConnectInstance.post(data, callback, this.handle);\n      };\n\n      this.deleteRecord = function (rid, callback) {\n          this.handle = function (response) {\n              var rid = BaseConnectInstance.getNode(response, \"rid\");\n              return rid ? true : false;\n          };\n\n          var data = {\n              dbid: this.tableName,\n              action: \"DeleteRecord\",\n              params: {\n                  \"rid\": rid\n              }\n          };\n\n          return BaseConnectInstance.post(data, callback, this.handle);\n      };\n\n      this.purgeRecords = function (query, callback) {\n          this.handle = function (response) {\n              var numberOfRecordDeleted = BaseConnectInstance.getNode(response, \"num_records_deleted\");\n              return parseInt(numberOfRecordDeleted);\n          };\n\n          var data = {\n              dbid: this.tableName,\n              action: \"PurgeRecords\",\n              params: {\n                  \"query\": query\n              }\n          };\n\n          return BaseConnectInstance.post(data, callback, this.handle);\n      };\n\n      this.runImport = function (id, callback) {\n          this.handle = function (response) {\n              var numberOfRecordsImported = BaseConnectInstance.getNode(response, \"import_status\").match(/\\d+/)[0];\n              return parseInt(numberOfRecordsImported);\n          };\n\n          var data = {\n              dbid: this.tableName,\n              action: \"RunImport\",\n              params: {\n                  \"id\": id\n              }\n          };\n\n          return BaseConnectInstance.post(data, callback, this.handle);\n      };\n\n      this.importFromCSV = function (csvArray, callback) {\n          this.handle = function (response) {\n              return BaseConnectInstance.getNewRids(response);\n          };\n\n          var csv = \"\";\n          var clist = [];\n\n          for (key in csvArray[0]) {\n              if (BaseConnectInstance.config) {\n                  tableConfig = BaseConnectInstance.config.tables[this.tableName];\n                  key = tableConfig[key];\n              };\n\n              clist.push(key);\n          };\n\n          clist = clist.join(\".\");\n\n          for (var i = 0; i < csvArray.length; i++) {\n              var row = csvArray[i];\n              var rowValues = [];\n\n              for (key in row) {\n                  value = row[key];\n                  value = value.toString().replace(/\"/g, '\"\"');\n                  rowValues.push('\"' + value + '\"');\n              };\n\n              rowValues.join(\",\")\n              rowValues += \"\\n\"\n\n              csv += (rowValues);\n          };\n\n          var data = {\n              dbid: this.tableName,\n              action: \"ImportFromCSV\",\n              params: {\n                  \"clist\": clist\n              },\n              csvData: csv\n          }\n\n          return BaseConnectInstance.post(data, callback, this.handle);\n      };\n\n      this.getTableFields = function (callback) {\n          this.handle = function (response) {\n              return BaseConnectInstance.getTableSchema(response);\n          };\n\n          var data = {\n              dbid: this.tableName,\n              action: \"GetSchema\"\n          };\n\n          return BaseConnectInstance.post(data, callback, this.handle);\n      };\n\n      this.genAddRecordForm = function (params, callback) {\n          this.handle = function (response) {\n              return response;\n          };\n\n          var data = {\n              dbid: this.tableName,\n              action: \"GenAddRecordForm\",\n              fidParams: params\n          };\n\n          return BaseConnectInstance.post(data, callback, this.handle);\n      };\n\n      this.getNumRecords = function (callback) {\n          this.handle = function (response) {\n              return parseInt(BaseConnectInstance.getNode(response, \"num_records\"));\n          };\n\n          var data = {\n              dbid: this.tableName,\n              action: \"GetNumRecords\"\n          };\n\n          return BaseConnectInstance.post(data, callback, this.handle);\n      };\n\n      this.setFieldProperties = function (fid, params, callback) {\n          this.handle = function (response) {\n              var error = BaseConnectInstance.getNode(response, \"errcode\");\n              return error == 0 ? true : false;\n          };\n\n          params[\"fid\"] = fid;\n\n          var data = {\n              dbid: this.tableName,\n              action: \"SetFieldProperties\",\n              params: params\n          };\n\n          return BaseConnectInstance.post(data, callback, this.handle);\n      };\n\n      this.getTableReports = function (callback) {\n          this.handle = function (response) {\n              return BaseConnectInstance.getReports(response);\n          };\n\n          var data = {\n              dbid: this.tableName,\n              action: \"GetSchema\"\n          };\n\n          return BaseConnectInstance.post(data, callback, this.handle);\n      };\n  };\n\n  this.setTables = function (tables) {\n      for (var key in tables) {\n          this[key] = new this.Table(key, tables[key]);\n      };\n  };\n\n  this.setTables(config.tables);\n\n  this.getAppTables = function (callback) {\n      this.handle = function (response) {\n          return BaseConnectInstance.getAppSchemaInfo(response);\n      };\n\n      var data = {\n          dbid: this.databaseId,\n          action: \"GetSchema\"\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.getOneTimeTicket = function (callback) {\n      this.handle = function (response) {\n          return BaseConnectInstance.getNode(response, \"ticket\");\n      };\n\n      var data = {\n          action: \"GetOneTimeTicket\"\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.authenticate = function (auth, hours, callback) {\n      this.handle = function (response) {\n          return BaseConnectInstance.getNode(response, \"ticket\");\n      };\n\n      var data = {\n          action: \"Authenticate\",\n          params: {\n              \"hours\": hours\n          }\n      };\n\n      if (auth.ticket) {\n          data.params.ticket = auth.ticket;\n      };\n\n      if (auth.username && auth.password) {\n          data[\"username\"] = auth.username;\n          data[\"password\"] = auth.password;\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.signOut = function (callback) {\n      this.handle = function (response) {\n          var error = BaseConnectInstance.getNode(response, \"errcode\");\n          return error == \"0\" ? true : false;\n      };\n\n      var data = {\n          action: \"SignOut\",\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.getDBVar = function (name, callback) {\n      this.handle = function (response) {\n          return BaseConnectInstance.getNode(response, \"value\");\n      };\n\n      var data = {\n          dbid: this.databaseId,\n          action: \"GetDBvar\",\n          params: {\n              \"varname\": name\n          }\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle)\n  };\n\n  this.setDBVar = function (name, value, callback) {\n      this.handle = function (response) {\n          return true;\n      };\n\n      var data = {\n          dbid: this.databaseId,\n          action: \"SetDBvar\",\n          params: {\n              \"varname\": name,\n              \"value\": value\n          }\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.uploadPage = function (id, name, body, callback) {\n      this.handle = function (response) {\n          return BaseConnectInstance.getNode(response, \"pageID\");\n      };\n\n      var params = {\n          \"pagetype\": \"1\",\n          \"pagebody\": body\n      };\n\n      if (id) {\n          params[\"pageid\"] = id;\n      } else if (name) {\n          params[\"pagename\"] = name;\n      };\n\n      var data = {\n          dbid: this.databaseId,\n          action: \"AddReplaceDBPage\",\n          params: params\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.deletePage = function (pageId, callback) {\n      this.handle = function (response) {\n          var error = BaseConnectInstance.getNode(response, \"errcode\");\n          return error == \"0\" ? true : false;\n      };\n\n      var data = {\n          dbid: this.databaseId,\n          action: \"PageDelete\",\n          type: \"QBI\",\n          params: {\n              \"pageid\": pageId\n          }\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.getDbPage = function (pageId, callback) {\n      this.handle = function (response) {\n          return BaseConnectInstance.getNode(response, \"pagebody\");\n      };\n\n      var data = {\n          dbid: this.databaseId,\n          action: \"GetDBPage\",\n          type: \"API\",\n          params: {\n              \"pageID\": pageId\n          }\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.cloneDatabase = function (params, callback) {\n      this.handle = function (response) {\n          return BaseConnectInstance.getNode(response, \"newdbid\");\n      };\n\n      var data = {\n          dbid: this.databaseId,\n          action: \"CloneDatabase\",\n          type: \"API\",\n          params: params\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.createDatabase = function (name, description, createAppToken, callback) {\n      this.handle = function (response) {\n          return BaseConnectInstance.getNode(response, \"dbid\");\n      };\n\n      var data = {\n          action: \"CreateDatabase\",\n          type: \"API\",\n          params: {\n              \"dbname\": name,\n              \"dbdesc\": description,\n              \"createapptoken\": createAppToken || false\n          }\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.deleteDatabase = function (callback) {\n      this.handle = function (response) {\n          var error = BaseConnectInstance.getNode(response, \"errcode\");\n          return error == \"0\" ? true : false;\n      };\n\n      var data = {\n          dbid: this.databaseId,\n          action: \"DeleteDatabase\",\n          type: \"API\"\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.renameApp = function (name, callback) {\n      this.handle = function (response) {\n          var error = BaseConnectInstance.getNode(response, \"errcode\");\n          return error == \"0\" ? true : false;\n      };\n\n      var data = {\n          dbid: this.databaseId,\n          action: \"RenameApp\",\n          type: \"API\",\n          params: {\n              \"newappname\": name\n          }\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.findDbByName = function (name, callback) {\n      this.handle = function (response) {\n          return BaseConnectInstance.getNode(response, \"dbid\");\n      };\n\n      var data = {\n          action: \"FindDBByName\",\n          type: \"API\",\n          params: {\n              \"dbname\": name\n          }\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.getTables = function (callback) {\n      this.handle = function (schema) {\n          var tables = $(schema).find(\"chdbid\");\n          var tablesObj = {};\n\n          for (var i = 0; i < tables.length; i++) {\n              var table = tables[i];\n              var tableName = $(table).attr(\"name\");\n              var tableId = $(table).text();\n\n              tablesObj[tableName] = tableId;\n          }\n\n          return tablesObj;\n      };\n\n      var data = {\n          dbid: this.databaseId,\n          action: \"GetSchema\",\n          type: \"API\"\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.getAppDtmInfo = function (callback) {\n      this.handle = function (response) {\n\n          var allTables = {};\n          var tables = $(response).find(\"tables\").find(\"table\");\n          for (var i = 0; i < tables.length; i++) {\n              var table = tables[i];\n              var tableHash = {\n                  \"lastModifiedTime\": $(table).find(\"lastModifiedTime\").text(),\n                  \"lastRecModTime\": $(table).find(\"lastRecModTime\").text()\n              };\n\n              allTables[$(table).attr(\"id\")] = tableHash;\n          };\n\n          var info = {\n              \"requestTime\": BaseConnectInstance.getNode(response, \"RequestTime\"),\n              \"requestNextAllowedTime\": BaseConnectInstance.getNode(response, \"RequestNextAllowedTime\"),\n              \"lastModifiedTime\": BaseConnectInstance.getNode(response, \"lastModifiedTime\"),\n              \"lastRecModTime\": BaseConnectInstance.getNode(response, \"lastRecModTime\"),\n              \"tables\": allTables\n          };\n\n          return info;\n      };\n\n      var data = {\n          action: \"GetAppDTMInfo\",\n          type: \"API\",\n          params: {\n              \"dbid\": this.databaseId\n          }\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.getDbInfo = function (callback) {\n      this.handle = function (response) {\n          var info = {\n              \"dbname\": BaseConnectInstance.getNode(response, \"dbname\"),\n              \"lastRecModTime\": BaseConnectInstance.getNode(response, \"lastRecModTime\"),\n              \"createdTime\": BaseConnectInstance.getNode(response, \"createdTime\"),\n              \"numRecords\": BaseConnectInstance.getNode(response, \"numRecords\"),\n              \"mgrID\": BaseConnectInstance.getNode(response, \"mgrID\"),\n              \"mgrName\": BaseConnectInstance.getNode(response, \"mgrName\"),\n              \"version\": BaseConnectInstance.getNode(response, \"version\"),\n              \"time_zone\": BaseConnectInstance.getNode(response, \"time_zone\")\n          };\n\n          return info;\n      };\n\n      var data = {\n          dbid: this.databaseId,\n          action: \"GetDBInfo\",\n          type: \"API\"\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.grantedDbs = function (params, callback) {\n      this.handle = function (response) {\n\n          var allDatabases = [];\n          var databases = $(response).find(\"databases\").find(\"dbinfo\");\n\n          for (var i = 0; i < databases.length; i++) {\n              var database = databases[i];\n              var databaseHash = {\n                  \"dbname\": BaseConnectInstance.getNode(database, \"dbname\"),\n                  \"dbid\": BaseConnectInstance.getNode(database, \"dbid\")\n              };\n\n              allDatabases.push(databaseHash);\n          };\n\n          return allDatabases;\n      };\n\n      var data = {\n          action: \"GrantedDBs\",\n          type: \"API\",\n          params: params\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.getUserInfo = function (email, callback, handler) {\n      this.handle = function (response) {\n          var user = $(response).find(\"user\");\n\n          user = {\n              \"id\": $(user).attr(\"id\"),\n              \"firstName\": $(user).find(\"firstName\").text(),\n              \"lastName\": $(user).find(\"lastName\").text(),\n              \"login\": $(user).find(\"login\").text(),\n              \"email\": $(user).find(\"email\").text(),\n              \"screenName\": $(user).find(\"screenName\").text(),\n              \"isVerified\": $(user).find(\"isVerified\").text(),\n              \"externalAuth\": $(user).find(\"externalAuth\").text()\n          };\n\n          return user;\n      };\n\n      if (!email) {\n          email = \"\";\n      };\n\n      var data = {\n          dbid: \"main\",\n          action: \"GetUserInfo\",\n          params: {\n              \"email\": email\n          }\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.getUserRoles = function (callback) {\n      this.handle = function (response) {\n          return BaseConnectInstance.formatUserRoles(response);\n      };\n\n      var data = {\n          dbid: this.databaseId,\n          action: \"UserRoles\"\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.changeUserRole = function (userId, roleId, newRoleId, callback) {\n      this.handle = function (response) {\n          return true;\n      };\n\n      var data = {\n          dbid: this.databaseId,\n          action: \"ChangeUserRole\",\n          params: {\n              userId: userId,\n              roleId: roleId\n          }\n      };\n\n      if (newRoleId) {\n          data[\"params\"][\"newRoleId\"] = newRoleId;\n      };\n\n      return BaseConnectInstance.post(data, callback, this.handle);\n  };\n\n  this.quickstart = {\n      // data = {\n      //   username: 'test@example.com',\n      //   password: 'password123'\n      // }\n      register: function (data, callback) {\n          this.handler = function (response) {\n              if (response.ticket) {\n                  BaseHelpers.setCookie(_self.cookieName, JSON.stringify(response), 12);\n              } else {\n                  BaseHelpers.setCookie(_self.cookieName, \"\", -1);\n              };\n\n              return response;\n          };\n\n          data.quickstartAction = \"Register\";\n          data.appToken = config.apptoken;\n          data.realm = config.realm;\n          data.dbid = config.databaseId;\n\n          return _self.quickstartPost(data, callback, this.handler);\n      },\n\n      // data = {\n      //   username: 'test@example.com',\n      //   password: 'password123'\n      // }\n      signIn: function (data, callback) {\n          this.handler = function (response) {\n              if (response.ticket) {\n                  BaseHelpers.setCookie(_self.cookieName, JSON.stringify(response), 12);\n              } else {\n                  BaseHelpers.setCookie(_self.cookieName, \"\", -1);\n              };\n\n              return response;\n          };\n\n          data.quickstartAction = \"SignIn\";\n          data.appToken = config.apptoken;\n          data.realm = config.realm;\n          data.dbid = config.databaseId;\n\n          return _self.quickstartPost(data, callback, this.handler);\n      },\n\n      signOut: function (callback) {\n          BaseHelpers.setCookie(_self.cookieName, \"\", -1);\n\n          if (callback) {\n              callback(true);\n          }\n      },\n\n      // data = {\n      //   currentPassword: 'password123',\n      //   newPassword: 'notPassword123'\n      // }\n      changePassword: function (data, callback) {\n          this.handler = function (response) {\n              return response;\n          };\n\n          data.quickstartAction = \"ChangePassword\";\n          data.ticket = JSON.parse(BaseHelpers.getCookie(_self.cookieName)).ticket;\n          data.realm = config.realm;\n          data.dbid = config.databaseId;\n\n          return _self.quickstartPost(data, callback, this.handler);\n      },\n\n      // emailObj = {\n      //   to: 'test@example.com',\n      //   subject: 'email subject'\n      //   callbackUrl: 'callbackUrl',\n      //   html: 'body of the email with link _self matches the callbackUrl'\n      // }\n      forgotPassword: function (emailObj, callback) {\n          this.handler = function (response) {\n              return response;\n          };\n\n          var data = {\n              email: emailObj\n          };\n\n          data.quickstartAction = \"ForgotPassword\";\n          data.realm = config.realm;\n          data.dbid = config.databaseId;\n          data.appToken = config.apptoken;\n\n          return _self.quickstartPost(data, callback, this.handler);\n      },\n\n      // data = {\n      //   sessionID: 'sessionID pulled from url params',\n      //   newPassword: 'users new password'\n      // }\n      resetPassword: function (data, callback) {\n          this.handler = function (response) {\n              return response;\n          };\n\n          data.quickstartAction = \"ResetPassword\";\n          data.realm = config.realm;\n          data.dbid = config.databaseId;\n          data.appToken = config.apptoken;\n\n          return _self.quickstartPost(data, callback, this.handler);\n      }\n  }\n}\n\nvar BaseHelpers = {\n  options: {\n      timeZone: 'utc',\n      format: 'hours'\n  },\n\n  setCookie: function (name, value, hours) {\n      var d = new Date();\n      d.setTime(d.getTime() + (hours * 60 * 60 * 1000));\n      var expires = \"expires=\" + d.toUTCString();\n\n      document.cookie = name + \"=\" + value + \"; \" + expires;\n  },\n\n  getCookie: function (name) {\n      var name = name + \"=\";\n      var ca = document.cookie.split(';');\n      for (var i = 0; i < ca.length; i++) {\n          var c = ca[i];\n          while (c.charAt(0) == ' ') {\n              c = c.substring(1);\n          };\n\n          if (c.indexOf(name) == 0) {\n              return c.substring(name.length, c.length);\n          };\n      }\n      return \"\";\n  },\n\n  inverseTables: function (config) {\n      var inverseTables = {};\n\n      for (var table in config) {\n          var newObject = {};\n\n          for (var field in config[table]) {\n              newObject[config[table][field].toString()] = field;\n          };\n\n          inverseTables[table] = newObject;\n      };\n\n      return inverseTables;\n  },\n\n  getUrlParam: function (name) {\n      name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n      var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n          results = regex.exec(location.search);\n      return results == null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n  },\n\n  formatDateElement: function (element) {\n      element = element.toString();\n      if (element.length == 1) {\n          element = \"0\" + element;\n      };\n\n      return element;\n  },\n\n  dateToString: function (milliseconds) {\n      if (milliseconds) {\n          var date = new Date(parseInt(milliseconds));\n          var month = this.formatDateElement((date.getUTCMonth() + 1));\n          var day = this.formatDateElement(date.getUTCDate());\n\n          date = [month, day, date.getUTCFullYear()].join(\"-\");\n\n          return date;\n      } else {\n          return ' ';\n      }\n  },\n\n  dateTimeToString: function (milliseconds, timeZone) {\n      var today = new Date();\n      var timeZone = timeZone ? timeZone.toLowerCase().trim() : this.options.timeZone.toLowerCase();\n\n      Date.prototype.stdTimezoneOffset = function () {\n          var jan = new Date(this.getFullYear(), 0, 1);\n          var jul = new Date(this.getFullYear(), 6, 1);\n          return Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n      }\n\n      Date.prototype.dst = function () {\n          return this.getTimezoneOffset() < this.stdTimezoneOffset();\n      }\n\n      var zoneOffsets = {\n          \"utc\": 0,\n          \"eastern\": today.dst() ? -4 : -5,\n          \"central\": today.dst() ? -5 : -6,\n          \"mountain\": today.dst() ? -6 : -7,\n          \"pacific\": today.dst() ? -7 : -8\n      };\n\n      var offset = zoneOffsets[timeZone];\n\n      if (milliseconds) {\n          var date = new Date(parseInt(milliseconds) + (60 * 60 * 1000 * offset));\n\n          var year = this.formatDateElement((date.getUTCFullYear));\n          var month = this.formatDateElement((date.getUTCMonth() + 1));\n          var day = this.formatDateElement(date.getUTCDate());\n          var hours = this.formatDateElement(date.getUTCHours());\n          var minutes = this.formatDateElement(date.getUTCMinutes());\n          var seconds = this.formatDateElement(date.getUTCSeconds());\n\n          var dateTime = [month, day, date.getUTCFullYear()].join(\"-\");\n          var ampm = parseInt(hours) >= 12 ? 'PM' : 'AM';\n\n          hours = hours % 12;\n          hours = hours ? hours : 12; // the hour '0' should be '12'\n\n          dateTime += \" \"\n          dateTime += [hours, minutes].join(\":\")\n          dateTime += \" \" + ampm\n          return dateTime;\n      } else {\n          return '';\n      }\n  },\n\n  durationToString: function (milliseconds, format) {\n      var ms = parseInt(milliseconds);\n      var result;\n      var format = format ? format.trim().toLowerCase() : this.options.format.toLowerCase();\n\n      var formatType = {\n          \"days\": function () {\n              return ms / 86400000;\n          },\n          \"hours\": function () {\n              return ms / 3600000;\n          },\n          \"minutes\": function () {\n              return ms / 60000;\n          },\n          \"seconds\": function () {\n              return ms / 1000;\n          }\n      };\n\n      if (milliseconds) {\n          if (formatType[format]) {\n              result = formatType[format]();\n          } else {\n              result = formatType[\"hours\"]();\n              console.log(\"The format parameter passed to BaseHelpers.durationToString() was incorrect. Using the format for 'hours' instead.\");\n          }\n\n          result = Math.round(result * 100) / 100;\n          return result.toString();\n      } else {\n          return '';\n      }\n  },\n\n  timeOfDayToString: function (milliseconds) {\n      var timeOfDay = \"\";\n\n      timeOfDay = new Date()\n      timeOfDay.setHours(\"\");\n      timeOfDay.setMinutes(\"\");\n      timeOfDay.setSeconds(\"\");\n      timeOfDay.setMilliseconds(milliseconds);\n\n      var hours = timeOfDay.getHours().toString();\n      var minutes = timeOfDay.getMinutes().toString();\n      var ampm = hours >= 12 ? \"pm\" : \"am\";\n\n      hours = hours % 12;\n      hours = hours ? hours : 12; // the hour '0' should be '12'\n      minutes = minutes.length > 1 ? minutes : \"0\" + minutes;\n\n      timeOfDay = hours + \":\" + minutes + \" \" + ampm\n\n      return timeOfDay;\n  },\n\n  redirectToEditForm: function (dbid, rid, root) {\n      var root = root || '';\n      window.location = root + \"/db/\" + dbid + \"?a=er&rid=\" + rid;\n  },\n\n  redirectToViewForm: function (dbid, rid, root) {\n      var root = root || '';\n      window.location = root + \"/db/\" + dbid + \"?a=dr&rid=\" + rid;\n  },\n\n  downloadFile: function (dbid, rid, fid, version) {\n      var version = version || 0;\n\n      window.location = \"https://www.quickbase.com/up/\" + dbid + \"/a/r\" + rid + \"/e\" + fid + \"/v\" + version;\n  }\n};"]}